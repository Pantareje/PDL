FIRST de ARITHOP -> +  =  { + }
FIRST de ARITHOP -> -  =  { - }
FIRST de ARITHOP  =  { + - }
FIRST de ARITH -> ARITHOP EXPATOM ARITH  =  { + - }
FIRST de ARITH -> lambda  =  { lambda }
FIRST de ARITH  =  { + - lambda }
FIRST de COMPOP -> >  =  { > }
FIRST de COMPOP -> <  =  { < }
FIRST de COMPOP  =  { < > }
FIRST de COMP -> COMPOP EXP4 COMP  =  { < > }
FIRST de COMP -> lambda  =  { lambda }
FIRST de COMP  =  { < > lambda }
FIRST de EXPAND -> && EXP3 EXPAND  =  { && }
FIRST de EXPAND -> lambda  =  { lambda }
FIRST de EXPAND  =  { && lambda }
FIRST de EXPOR -> || EXP2 EXPOR  =  { || }
FIRST de EXPOR -> lambda  =  { lambda }
FIRST de EXPOR  =  { || lambda }
FIRST de NEXTPARAM -> , EXP1 NEXTPARAM  =  { , }
FIRST de NEXTPARAM -> lambda  =  { lambda }
FIRST de NEXTPARAM  =  { , lambda }
FIRST de ASS -> =  =  { = }
FIRST de ASS -> +=  =  { += }
FIRST de ASS  =  { += = }
FIRST de ATOMSTATEMENT -> id IDACT ;  =  { id }
FIRST de ATOMSTATEMENT -> output EXP1 ;  =  { output }
FIRST de ATOMSTATEMENT -> input id ;  =  { input }
FIRST de ATOMSTATEMENT -> return RETURNEXP ;  =  { return }
FIRST de ATOMSTATEMENT  =  { id input output return }
FIRST de STATEMENT -> if ( EXP1 ) ATOMSTATEMENT  =  { if }
FIRST de STATEMENT -> for ( FORACT ; EXP1 ; FORACT ) { BODY }  =  { for }
FIRST de STATEMENT -> var VARTYPE id ;  =  { var }
FIRST de STATEMENT -> ATOMSTATEMENT  =  { id input output return }
FIRST de STATEMENT  =  { for id if input output return var }
FIRST de BODY -> STATEMENT BODY  =  { for id if input output return var }
FIRST de BODY -> lambda  =  { lambda }
FIRST de BODY  =  { for id if input output return var lambda }
FIRST de EXPATOM -> id IDVAL  =  { id }
FIRST de EXPATOM -> ( EXP1 )  =  { ( }
FIRST de EXPATOM -> cint  =  { cint }
FIRST de EXPATOM -> cstr  =  { cstr }
FIRST de EXPATOM -> true  =  { true }
FIRST de EXPATOM -> false  =  { false }
FIRST de EXPATOM  =  { ( cint cstr false id true }
FIRST de EXP4 -> EXPATOM ARITH  =  { ( cint cstr false id true }
FIRST de EXP4  =  { ( cint cstr false id true }
FIRST de EXP3 -> EXP4 COMP  =  { ( cint cstr false id true }
FIRST de EXP3  =  { ( cint cstr false id true }
FIRST de EXP2 -> EXP3 EXPAND  =  { ( cint cstr false id true }
FIRST de EXP2  =  { ( cint cstr false id true }
FIRST de EXP1 -> EXP2 EXPOR  =  { ( cint cstr false id true }
FIRST de EXP1  =  { ( cint cstr false id true }
FIRST de CALLPARAM -> EXP1 NEXTPARAM  =  { ( cint cstr false id true }
FIRST de CALLPARAM -> lambda  =  { lambda }
FIRST de CALLPARAM  =  { ( cint cstr false id true lambda }
FIRST de FORACT -> id ASS EXP1  =  { id }
FIRST de FORACT -> lambda  =  { lambda }
FIRST de FORACT  =  { id lambda }
FIRST de FUNATTRIBUTES -> void  =  { void }
FIRST de VARTYPE -> int  =  { int }
FIRST de VARTYPE -> boolean  =  { boolean }
FIRST de VARTYPE -> string  =  { string }
FIRST de VARTYPE  =  { boolean int string }
FIRST de FUNATTRIBUTES -> VARTYPE id NEXTATTRIBUTE  =  { boolean int string }
FIRST de FUNATTRIBUTES  =  { boolean int string void }
FIRST de FUNCTION -> function FUNTYPE id ( FUNATTRIBUTES ) { BODY }  =  { function }
FIRST de FUNCTION  =  { function }
FIRST de FUNTYPE -> void  =  { void }
FIRST de FUNTYPE -> VARTYPE  =  { boolean int string }
FIRST de FUNTYPE  =  { boolean int string void }
FIRST de IDACT -> ASS EXP1  =  { += = }
FIRST de IDACT -> ( CALLPARAM )  =  { ( }
FIRST de IDACT  =  { ( += = }
FIRST de IDVAL -> ( CALLPARAM )  =  { ( }
FIRST de IDVAL -> lambda  =  { lambda }
FIRST de IDVAL  =  { ( lambda }
FIRST de NEXTATTRIBUTE -> , VARTYPE id NEXTATTRIBUTE  =  { , }
FIRST de NEXTATTRIBUTE -> lambda  =  { lambda }
FIRST de NEXTATTRIBUTE  =  { , lambda }
FIRST de P -> FUNCTION P  =  { function }
FIRST de P -> STATEMENT P  =  { for id if input output return var }
FIRST de P -> eof  =  { eof }
FIRST de P  =  { eof for function id if input output return var }
FIRST de RETURNEXP -> EXP1  =  { ( cint cstr false id true }
FIRST de RETURNEXP -> lambda  =  { lambda }
FIRST de RETURNEXP  =  { ( cint cstr false id true lambda }
